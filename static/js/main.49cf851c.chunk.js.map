{"version":3,"sources":["components/Header.js","components/Editor.js","components/Preview.js","components/App.js","index.js"],"names":["Header","className","Editor","this","props","displayLabel","language","value","onBeforeChange","_editor","_data","handleChange","options","lineWrapping","lint","mode","lineNumbers","React","Component","Preview","showPreview","preview","current","xml","css","document","contentWindow","style","createElement","innerText","head","append","body","innerHTML","createRef","prevProps","onClick","text","title","ref","id","width","height","App","state","setState","marginRight","ReactDOM","render","StrictMode","getElementById"],"mappings":"uOAWeA,MAXf,WACE,OACE,iCACE,sBAAKC,UAAU,iBAAf,UACE,6CACA,8E,QC+BOC,G,+LA5BH,IAAD,OACP,OACE,sBAAKD,UAAWE,KAAKC,MAAMH,UAAY,UAAvC,UACE,sBAAKA,UAAU,gBAAf,UACE,qBAAKA,UAAU,mBACf,mBAAGA,UAAU,WAAb,SACGE,KAAKC,MAAMC,cAAgBF,KAAKC,MAAME,cAG3C,qBAAKL,UAAU,cAAf,SACE,cAAC,aAAD,CACEM,MAAOJ,KAAKC,MAAMG,MAClBC,eAAgB,SAACC,EAASC,EAAOH,GAAjB,OACd,EAAKH,MAAMO,aAAaJ,EAAO,EAAKH,MAAME,WAE5CM,QAAS,CACPC,cAAc,EACdC,MAAM,EACNC,KAAMZ,KAAKC,MAAME,SACjBU,aAAa,c,GApBNC,IAAMC,YCwCZC,E,kDA5Cb,aAAe,IAAD,8BACZ,gBAYFC,YAAc,WACZ,GAAI,EAAKC,QAAQC,QAAS,CAAC,IAAD,EACL,EAAKlB,MAAlBmB,EADkB,EAClBA,IAAKC,EADa,EACbA,IACPC,EAAW,EAAKJ,QAAQC,QAAQI,cAAcD,SAC9CE,EAAQF,EAASG,cAAc,SACnCD,EAAME,UAAYL,EAClBC,EAASK,KAAKC,OAAOJ,GACrBF,EAASO,KAAKC,UAAYV,IAlB5B,EAAKF,QAAUJ,IAAMiB,YAFT,E,gEAKZ/B,KAAKiB,gB,yCAEYe,GACbA,EAAUX,MAAQrB,KAAKC,MAAMoB,KAAOW,EAAUZ,MAAQpB,KAAKC,MAAMmB,KACnEpB,KAAKiB,gB,+BAeP,OACE,sBAAKnB,UAAU,SAAf,UACE,sBAAKA,UAAU,+BAAf,UACE,qBAAKA,UAAU,mBACf,mBAAGA,UAAU,WAAWmC,QAASjC,KAAKiB,YAAtC,SACGjB,KAAKC,MAAMiC,UAGhB,wBACEC,MAAM,mBACNC,IAAKpC,KAAKkB,QACVmB,GAAG,cACHC,MAAM,OACNC,OAAO,gB,GAtCKzB,IAAMC,WCwCbyB,E,4MApCbC,MAAQ,CACNrB,IAAK,wFACLC,IAAK,4N,EAGPb,aAAe,SAACJ,EAAOD,GACrB,EAAKuC,SAAL,eAAiBvC,EAAWC,K,uDAGpB,IAAD,EACYJ,KAAKyC,MAAlBrB,EADC,EACDA,IAAKC,EADJ,EACIA,IACX,OACE,sBAAKvB,UAAU,OAAf,UACE,cAAC,EAAD,IACA,sBAAKA,UAAU,UAAf,UACE,sBAAK0B,MAAO,CAAEmB,YAAa,QAA3B,UACE,cAAC,EAAD,CACExC,SAAS,MACTC,MAAOgB,EACPlB,aAAa,OACbM,aAAcR,KAAKQ,eAErB,cAAC,EAAD,CACEL,SAAS,MACTL,UAAU,QACVM,MAAOiB,EACPb,aAAcR,KAAKQ,kBAGvB,cAAC,EAAD,CAAS0B,KAAK,SAASd,IAAKA,EAAKC,IAAKA,c,GA9B9BP,IAAMC,WCAxB6B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxB,SAASyB,eAAe,W","file":"static/js/main.49cf851c.chunk.js","sourcesContent":["function Header() {\n  return (\n    <header>\n      <div className=\"header-content\">\n        <h1>Code Editor</h1>\n        <p>You can write and preview HTML and CSS!</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport { Controlled as CodeMirror } from \"react-codemirror2\";\nimport \"codemirror/lib/codemirror.css\";\nimport \"codemirror/mode/xml/xml\";\nimport \"codemirror/mode/css/css\";\nimport \"codemirror/addon/edit/closetag\";\n\nclass Editor extends React.Component {\n  render() {\n    return (\n      <div className={this.props.className + \" window\"}>\n        <div className=\"window-header\">\n          <div className=\"action-buttons\"></div>\n          <p className=\"language\">\n            {this.props.displayLabel || this.props.language}\n          </p>\n        </div>\n        <div className=\"window-body\">\n          <CodeMirror\n            value={this.props.value}\n            onBeforeChange={(_editor, _data, value) =>\n              this.props.handleChange(value, this.props.language)\n            }\n            options={{\n              lineWrapping: true,\n              lint: true,\n              mode: this.props.language,\n              lineNumbers: true,\n            }}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Editor;\n","import React from \"react\";\n\nclass Preview extends React.Component {\n  constructor() {\n    super();\n    this.preview = React.createRef();\n  }\n  componentDidMount() {\n    this.showPreview();\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.css !== this.props.css || prevProps.xml !== this.props.xml) {\n      this.showPreview();\n    }\n  }\n\n  showPreview = () => {\n    if (this.preview.current) {\n      let { xml, css } = this.props;\n      let document = this.preview.current.contentWindow.document;\n      let style = document.createElement(\"style\");\n      style.innerText = css;\n      document.head.append(style);\n      document.body.innerHTML = xml;\n    }\n  };\n  render() {\n    return (\n      <div className=\"window\">\n        <div className=\"window-header preview-header\">\n          <div className=\"action-buttons\"></div>\n          <p className=\"language\" onClick={this.showPreview}>\n            {this.props.text}\n          </p>\n        </div>\n        <iframe\n          title=\"HTML/CSS Preview\"\n          ref={this.preview}\n          id=\"code_result\"\n          width=\"100%\"\n          height=\"100%\"\n        ></iframe>\n      </div>\n    );\n  }\n}\n\nexport default Preview;\n","import React from \"react\";\nimport Header from \"./Header\";\nimport Editor from \"./Editor\";\nimport Preview from \"./Preview\";\n\nclass App extends React.Component {\n  state = {\n    xml: '<center>\\n  <img src=\"https://cutt.ly/JbMvJKT\" />\\n  <h1>Hello World!</h1>\\n</center>',\n    css: \"h1 {\\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\\n}\\nimg {\\n  width: 200px;\\n  height: auto;\\n  border-radius: 20px;\\n}\",\n  };\n\n  handleChange = (value, language) => {\n    this.setState({ [language]: value });\n  };\n\n  render() {\n    let { xml, css } = this.state;\n    return (\n      <div className=\"view\">\n        <Header />\n        <div className=\"wrapper\">\n          <div style={{ marginRight: \"1rem\" }}>\n            <Editor\n              language=\"xml\"\n              value={xml}\n              displayLabel=\"html\"\n              handleChange={this.handleChange}\n            />\n            <Editor\n              language=\"css\"\n              className=\"m-top\"\n              value={css}\n              handleChange={this.handleChange}\n            />\n          </div>\n          <Preview text=\"OUTPUT\" xml={xml} css={css} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style/app.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}